{"ast":null,"code":"var _jsxFileName = \"/home/rishab/react/notes/notes-app/src/App.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport { nanoid } from 'nanoid';\nimport Header from './components/Header';\nimport Search from './components/Search';\nimport NotesList from './components/NotesList';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [notes, setNotes] = useState([]);\n  /*{\n      id: nanoid(),\n      text: \"Test Note\",\n      date: \"07/05/2023\"\n  },\n  {\n      id: nanoid(),\n      text: \"Test Note\",\n      date: \"07/05/2023\"\n  },\n  {\n      id: nanoid(),\n      text: \"Test Note\",\n      date: \"07/05/2023\"\n  }\n  ]);*/\n\n  const [searchText, setSearchText] = useState('');\n  const [darkMode, setDarkMode] = useState(false);\n\n  //console.log(localStorage.getItem('react-notes-app-data'));\n\n  useEffect(() => {\n    const savedNotes = JSON.parse(localStorage.getItem('react-notes-app-data'));\n    if (savedNotes) {\n      setNotes(savedNotes);\n    }\n  }, []);\n  useEffect(() => {\n    localStorage.setItem('react-notes-app-data', JSON.stringify(notes));\n    console.log(\"SAVED\");\n    console.log(notes);\n    console.log(JSON.parse(localStorage.getItem('react-notes-app-data')));\n  }, [notes]);\n  const addNote = text => {\n    const date = new Date();\n    const newNote = {\n      id: nanoid(),\n      text: text,\n      date: date.toLocaleDateString()\n    };\n    const newNotes = [...notes, newNote];\n    setNotes(newNotes);\n  };\n  const deleteNote = id => {\n    const newNotes = notes.filter(note => note.id !== id);\n    setNotes(newNotes);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `${darkMode && 'dark-mode'}`,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(Header, {\n        handleToggleDarkMode: setDarkMode\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Search, {\n        handleSearchNote: setSearchText\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(NotesList, {\n        notes: notes.filter(note => note.text.toLowerCase().includes(searchText)),\n        handleAddNote: addNote,\n        handleDeleteNote: deleteNote\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 9\n  }, this);\n};\n_s(App, \"5bUNu9S6uDNQ7apEIrFjsUZjsPY=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","useEffect","nanoid","Header","Search","NotesList","jsxDEV","_jsxDEV","App","_s","notes","setNotes","searchText","setSearchText","darkMode","setDarkMode","savedNotes","JSON","parse","localStorage","getItem","setItem","stringify","console","log","addNote","text","date","Date","newNote","id","toLocaleDateString","newNotes","deleteNote","filter","note","className","children","handleToggleDarkMode","fileName","_jsxFileName","lineNumber","columnNumber","handleSearchNote","toLowerCase","includes","handleAddNote","handleDeleteNote","_c","$RefreshReg$"],"sources":["/home/rishab/react/notes/notes-app/src/App.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { nanoid } from 'nanoid';\nimport Header from './components/Header';\nimport Search from './components/Search';\nimport NotesList from './components/NotesList';\n\nconst App = () => {\n    const [notes, setNotes] = useState([]);\n        /*{\n            id: nanoid(),\n            text: \"Test Note\",\n            date: \"07/05/2023\"\n        },\n        {\n            id: nanoid(),\n            text: \"Test Note\",\n            date: \"07/05/2023\"\n        },\n        {\n            id: nanoid(),\n            text: \"Test Note\",\n            date: \"07/05/2023\"\n        }\n    ]);*/\n\n    const [searchText, setSearchText] = useState('');\n\n    const [darkMode, setDarkMode] = useState(false);\n\n    //console.log(localStorage.getItem('react-notes-app-data'));\n\n    useEffect(() => {\n        const savedNotes = JSON.parse(localStorage.getItem('react-notes-app-data'));\n        if (savedNotes) {\n            setNotes(savedNotes);\n        }\n    }, []);\n  \n    useEffect(() => {\n        localStorage.setItem('react-notes-app-data', JSON.stringify(notes));\n        console.log(\"SAVED\");\n        console.log(notes);\n        console.log(JSON.parse(localStorage.getItem('react-notes-app-data')));\n    }, [notes]);\n\n    const addNote = (text) => {\n        const date = new Date();\n        const newNote = {\n            id: nanoid(),\n            text: text,\n            date: date.toLocaleDateString()\n        };\n        const newNotes = [...notes, newNote];\n        setNotes(newNotes);\n    };\n\n    const deleteNote = (id) => {\n        const newNotes = notes.filter((note) => note.id !== id);\n        setNotes(newNotes);\n    };\n\n    return (\n        <div className={`${darkMode && 'dark-mode'}`}>\n            <div className=\"container\">\n                <Header handleToggleDarkMode={setDarkMode}/>\n                <Search handleSearchNote={setSearchText}/>\n                <NotesList notes={notes.filter((note) => note.text.toLowerCase().includes(searchText))} handleAddNote={addNote} handleDeleteNote={deleteNote}/>\n            </div>\n        </div>\n    );\n};\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}